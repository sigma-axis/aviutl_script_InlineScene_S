--[[
MIT License
Copyright (c) 2024-2025 sigma-axis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

https://mit-license.org/
]]

--
-- VERSION: v1.10
--

--------------------------------

@Inline Sceneこのオブジェクトから
--check0:アルファチャンネルあり,1
--dialog:PI,_0=nil;
local has_alpha = obj.check0;
if _0 then
	local c0 = _0[0]; _0 = nil;
	if type(c0) == "boolean" then has_alpha = c0;
	elseif type(c0) == "number" then has_alpha = c0 ~= 0 end
end
local ils = require "InlineScene_S";
ils.Begin(has_alpha);

@Inline Sceneこのオブジェクトで次へ
--track0:上余白,-2000,2000,0,1
--track1:下余白,-2000,2000,0,1
--track2:左余白,-2000,2000,0,1
--track3:右余白,-2000,2000,0,1
--check0:アルファチャンネルあり,1
--dialog:ILシーン名,_1="scn1";余白を除去/chk,_2=1;PI,_0=nil;
local ext_t, ext_b, ext_l, ext_r, has_alpha, name, crop = obj.track0, obj.track1, obj.track2, obj.track3, obj.check0, _1, _2 ~= 0; _1 = nil; _2 = nil;
if _0 then
	local c0, t0, t1, t2, t3 = _0[0], _0[1], _0[2], _0[3], _0[4]; _0 = nil;
	if type(c0) == "boolean" then has_alpha = c0;
	elseif type(c0) == "number" then has_alpha = c0 ~= 0 end
	ext_t = tonumber(t0) or ext_t;
	ext_b = tonumber(t1) or ext_b;
	ext_l = tonumber(t2) or ext_l;
	ext_r = tonumber(t3) or ext_r;
end
local ils = require "InlineScene_S";
ils.Next(crop, ext_l, ext_t, ext_r, ext_b, name, has_alpha);

@Inline Scene単品保存
--check0:描画しない,1
--dialog:ILシーン名,_1="scn1";PI,_0=nil;
local hide, name = obj.check0, _1; _1 = nil;
if _0 then
	local c0 = _0[0]; _0 = nil;
	if type(c0) == "boolean" then hide = c0;
	elseif type(c0) == "number" then hide = c0 ~= 0 end
end
if obj.num > 1 then
	if obj.index == 0 then
		obj.setfont("MS UI Gothic", 34, 3);
		obj.load("text", [=[個別オブジェクトには適用できません!]=]);
	end
	return;
end
if hide then
	obj.setoption("focus_mode", "fixed_size");
	obj.setoption("draw_state", true);
end
local ils = require "InlineScene_S";
ils.save(name);

@Inline Scene合成
--track0:X,-2000,2000,0
--track1:Y,-2000,2000,0
--track2:拡大率,0,2000,100,0.01
--track3:透明度,0,100,0,0.1
--check0:ループ画像,0
--dialog:ILシーン名,_1="scn1";└現在フレーム/chk,_2=0;回転角度,_3=0.0;後方から合成/chk,_4=0;合成モード,_5="通常";PI,_0=nil;
obj.setanchor("track", 0);
local x, y, zoom, transp, loop, name, curr_frame, angle, back, blend = obj.track0, obj.track1, obj.track2, obj.track3, obj.check0, _1, _2 ~= 0, _3, _4 ~= 0, _5;
_1 = nil; _2 = nil; _3 = nil; _4 = nil; _5 = nil;
if _0 then
	local c0, t0, t1, t2, t3 = _0[0], _0[1], _0[2], _0[3], _0[4]; _0 = nil;
	if type(c0) == "boolean" then loop = c0;
	elseif type(c0) == "number" then loop = c0 ~= 0 end
	x = tonumber(t0) or x;
	y = tonumber(t1) or y;
	zoom = tonumber(t2) or zoom;
	transp = tonumber(t3) or transp;
end
local ils = require "InlineScene_S";
ils.combine(name, curr_frame, x, y, zoom / 100, 1 - transp / 100, angle, loop, back, blend);
